#! /bin/sh

help_message() {
	echo "usage: mark [-h] [-f] [-e] bookmark [location]"
	echo ""
	echo "bookmark locations for easy retrival"
	echo ""
	echo "positional arguments:"
	echo "  bookmark 	a name of the bookmark"
	echo "  location 	a directory of file to bookmark"
	echo ""
	echo "optional arguments:"
	echo "-h, --help 	show this help message and exit"
	echo "-f 			forces overwrite of an existing bookmark"
	echo "-l 			lists all the current bookmarks"
	echo ""
	echo "see also: unmark, goto"
}

list_bookmarks() {
	if [ -f ~/.bookmarks ]; then
	while read line    
	do    
		split=(${line//:/ })
		echo ${split[0]} "\t->\t" ${split[1]}
	done < ~/.bookmarks
fi
}

F_FLAG=false
L_FLAG=false

while [ $# -gt 0 ]
do
    case "$1" in
    	(-f) F_FLAG=true;;
    	(-l) L_FLAG=true;;
    	(-h) help_message; exit 0;;
    	(--help) help_message; exit 0;;
    	(-*) echo "$0: error - unrecognized option $1" 1>&2; exit 1;;
    	(*)  break;;
    esac
    shift
done

if [[ $L_FLAG = true ]]; then
	list_bookmarks
	exit 0
fi

if [[ "$#" == "0" ]]; then
	echo "error: you must supply a name for the bookmark" 1>&2
	exit 1
fi



NEW_MARK="$1"
shift

if [[ "$#" == "0" ]]; then
	LOCATION=$(pwd)
else
	if [[ -d $1 ]]; then
		LOCATION="$(cd $1; pwd)"
	else 
		LOCATION=$(python -c "import os; print os.path.abspath(\"$1\")")
	fi
	shift
fi

if  (($# > 0)); then
	echo "error: too many arguments" 1>&2; 
	exit 1
fi

marks=()
if [ -f ~/.bookmarks ]; then
	while read line    
	do    
		split=(${line//:/ })
		if [ ${split[0]} = $NEW_MARK -a $F_FLAG = false ]; then
			echo "error: bookmark '$NEW_MARK' already used." 1>&2
			exit 1
		else 
			marks+=($line)
		fi
	done < ~/.bookmarks
fi

NEW_MARK_LINE=$NEW_MARK:$LOCATION

if [[ -d $LOCATION ]]; then
	NEW_MARK_LINE=$NEW_MARK_LINE:d
else
	NEW_MARK_LINE=$NEW_MARK_LINE:x
fi	

marks=(${marks[@]} $NEW_MARK_LINE)

rm -rf ~/.bookmarks
touch ~/.bookmarks
for mark in ${marks[@]}; do
	echo $mark >> ~/.bookmarks
done


	

