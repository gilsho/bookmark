#! /bin/sh

bookmark_mark_help_message() {
	echo "usage: mark [-h] [-f] [-e] bookmark [location]"
	echo ""
	echo "bookmark locations for easy retrival"
	echo ""
	echo "positional arguments:"
	echo "  bookmark 	a name of the bookmark"
	echo "  location 	a directory of file to bookmark"
	echo ""
	echo "optional arguments:"
	echo "-h, --help 	show this help message and return"
	echo "-f 			forces overwrite of an existing bookmark"
	echo "-l 			lists all the current bookmarks"
	echo ""
	echo "see also: unmark, goto"
}

bookmark_unmark_help_message() {
	echo "usage: unmark [-h] bookmark"
	echo ""
	echo "remove a bookmarked location created using the 'mark' command"
	echo ""
	echo "positional arguments:"
	echo "  bookmark 	a name of the bookmark to remove"
	echo ""
	echo "optional arguments:"
	echo "-h, --help 	show this help message and return"
	echo ""
	echo "see also: mark, goto"
}

bookmark_goto_help_message() {
	echo "usage: goto [-h] bookmark"
	echo ""
	echo "navigate to a bookmarked location created using the 'mark' command"
	echo ""
	echo "positional arguments:"
	echo "  bookmark 	a name of the bookmark to navigate to or execute"
	echo ""
	echo "optional arguments:"
	echo "-h, --help 	show this help message and return"
	echo ""
	echo "see also: mark, unmark"
}

bookmark_list_bookmarks() {
	if [ -f ~/.bookmarks ]; then
		while read line    
		do    
			split=(${line//:/ })
			SAVED_MARK=${split[0]}
			LOCATION=${split[1]}
			echo -e $SAVED_MARK "\t->\t" $LOCATION
		done < ~/.bookmarks
	fi
}

mark() {
	# parse options
	F_FLAG=false
	L_FLAG=false

	while [ $# -gt 0 ]
	do
	    case "$1" in
	    	(-f) F_FLAG=true;;
	    	(-l) L_FLAG=true;;
	    	(-h) help_message; return 0;;
	    	(--help) bookmark_mark_message; return 0;;
	    	(-*) echo "$0: error - unrecognized option $1" 1>&2; return 1;;
	    	(*)  break;;
	    esac
	    shift
	done

	# if list option selected, list bookmarks list existing bookmarks
	if [[ $L_FLAG = true ]]; then
		bookmark_list_bookmarks
		return 0
	fi

	# parse arguments
	if [[ "$#" == "0" ]]; then
		echo "error: you must supply a name for the bookmark" 1>&2
		return 1
	fi

	NEW_MARK="$1"
	shift

	# extract full path of bookmark location
	if [[ "$#" == "0" ]]; then
		LOCATION=$(pwd)
	else
		if [[ -d $1 ]]; then
			LOCATION="$(cd $1; pwd)"
		else 
			# resolve full path to file
			LOCATION=$(python -c "import os; print os.path.abspath(\"$1\")")
		fi
		shift
	fi

	if  (($# > 0)); then
		echo "error: too many arguments" 1>&2; 
		return 1
	fi


	marks=()
	if [ -f ~/.bookmarks ]; then
		while read line    
		do    
			split=(${line//:/ })
			SAVED_MARK=${split[0]}
			if [ $SAVED_MARK = $NEW_MARK -a $F_FLAG = false ]; then
				echo "error: bookmark '$NEW_MARK' already used." 1>&2
				return 1
			else 
				marks+=($line)
			fi
		done < ~/.bookmarks
	fi

	marks=(${marks[@]} $NEW_MARK:$LOCATION)

	rm -rf ~/.bookmarks
	touch ~/.bookmarks
	for mark in ${marks[@]}; do
		echo $mark >> ~/.bookmarks
	done

}

unmark() {
	# parse options
	A_FLAG=false
	while [ $# -gt 0 ]
	do
	    case "$1" in
	    	(-h) help_message; return 0;;
	    	(-a) A_FLAG=true;;
	    	(--help) help_message; return 0;;
	    	(-*) echo "$0: error - unrecognized option $1" 1>&2; return 1;;
	    	(*)  break;;
	    esac
	    shift
	done

	if [ "$#" == "0" -a $A_FLAG = false ]; then
		echo "error: you must supply a name for the bookmark" 1>&2; return 1;
	fi

	# parse arguments
	NEW_MARK="$1"
	shift

	if  (($# > 0)); then
		echo "error: too many arguments" 1>&2; return 1;
	fi

	# accumulate all bookmarks other than one selected for removal
	marks=()
	if [ -f ~/.bookmarks ]; then
		while read line    
		do    
			split=(${line//:/ })
			SAVED_MARK=${split[0]}
			if [ ! $SAVED_MARK = "$NEW_MARK" -a "$A_FLAG" = false ]; then
				marks+=($line)
			fi
		done < ~/.bookmarks
	fi

	# replace old bookmark file with new contents
	rm -rf ~/.bookmarks
	touch ~/.bookmarks
	for mark in ${marks[@]}; do
		echo $mark >> ~/.bookmarks
	done
}

go() {
	# Parse options
	while [ $# -gt 0 ]
	do
	    case "$1" in
	    	(-h) help_message;;
	    	(--help) bookmark_goto_help_message;;
	    	(-*) echo "$0: error - unrecognized option $1" 1>&2; return 1;;
	    	(*)  break;;
	    esac
	    shift
	done

	# Parse arguments
	if [[ "$#" == "0" ]]; then
		echo "error: you must supply a name for the bookmark" 1>&2; return 1;
	elif (( $# > 1)); then
		echo "error: too many arguments" 1>&2; return 1;
	else
		MARK="$1"
		shift
	fi

	# search for bookmark
	marks=()
	found=false
	if [ -f ~/.bookmarks ]; then
		while read line    
		do    
			split=(${line//:/ })
			SAVED_MARK=${split[0]}
			LOCATION=${split[1]}
			if [ $SAVED_MARK = $MARK ]; then
				if [ -d $LOCATION ]; then
					cd $LOCATION;
					found=true
				elif [-f $LOCATION ]; then
					$LOCATION;
					found=true
				else
					echo "error: invalid bookmark" 1>&2;
					found=true
				fi
				break;
			fi
		done < ~/.bookmarks
	fi

	if [ $found = false ]; then
		echo "error: bookmark not found" 1>&2
	fi
}

	

